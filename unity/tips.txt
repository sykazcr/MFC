https://www.bilibili.com/video/BV1pC4y1p7iK/?spm_id_from=333.337.search-card.all.click&vd_source=679170e463d34386319e9e1d9a327c75
Unity 同时显示多个Scene
哈法程序员

--
E:\werk\gamer\UnitySTC2025

https://assetstore.unity.com/packages/tools/physics/silantro-helicopter-simulator-toolkit-142612
Silantro Helicopter Simulator Toolkit

https://assetstore.unity.com/packages/tools/physics/controlled-flight-lite-178925
flight lite tracks★

https://www.bilibili.com/video/BV1vf4y1F76k?spm_id_from=333.788.recommend_more_video.-1&vd_source=679170e463d34386319e9e1d9a327c75
BGCurve　＋　Shader
https://assetstore.unity.com/packages/tools/utilities/bg-curve-59043


https://cgbox.jp/2023/12/01/unity-camera-change/
カメラ切替

https://minatame-lab.com/unity2d-camera-move-zoomin-zoomout/
カメラ移動

https://stackoverflow.com/questions/19653304/changes-the-image-source-cyclically-in-wpf?rq=3
Changes the image source cyclically in WPF
DispatcherTimer dispatcherTimer = new DispatcherTimer();
dispatcherTimer.Tick += dispatcherTimer_Tick;
dispatcherTimer.Interval = new TimeSpan(0, 0, 0, 500);

private void dispatcherTimer_Tick(object sender, EventArgs e) {
   // assign new source to the Image
}

using System;
using System.IO;

class Program
{
    static void Main()
    {
        // Create a MemoryStream and write some data to it
        using (MemoryStream memoryStream = new MemoryStream())
        {
            byte[] data = { 0x01, 0x02, 0x03, 0x04, 0x05 };
            memoryStream.Write(data, 0, data.Length);

            // Convert the MemoryStream to a byte array
            byte[] byteArray = memoryStream.ToArray();

            // Display the byte array
            Console.WriteLine(BitConverter.ToString(byteArray));
        }
    }
}

class Program
{
    static void Main()
    {
        // Example byte array
        byte[] byteArray = { 0x01, 0x02, 0x03, 0x04, 0x05 };

        // Create a MemoryStream from the byte array
        using (MemoryStream memoryStream = new MemoryStream(byteArray))
        {
            // Use the MemoryStream here
            // For example, read the first byte
            int firstByte = memoryStream.ReadByte();
            Console.WriteLine("First byte: " + firstByte);
        }
    }
}


https://jp-seemore.com/sys/17566/
共有メモリの作成とアクセス

using System;
using System.IO.MemoryMappedFiles;
using System.Threading;

class Process1
{
    static void Main()
    {
        // Create or open a named mutex
        using (Mutex mutex = new Mutex(false, "Global\\MySharedMemoryMutex"))
        {
            // Create or open a memory-mapped file
            using (MemoryMappedFile mmf = MemoryMappedFile.CreateOrOpen("Global\\MySharedMemory", 1024))
            {
                // Lock the mutex to ensure exclusive access
                mutex.WaitOne();

                try
                {
                    // Write to the shared memory
                    using (MemoryMappedViewAccessor accessor = mmf.CreateViewAccessor())
                    {
                        byte[] message = System.Text.Encoding.UTF8.GetBytes("Hello from Process 1");
                        accessor.WriteArray(0, message, 0, message.Length);
                    }
                }
                finally
                {
                    // Release the mutex
                    mutex.ReleaseMutex();
                }
            }
        }
    }
}

using System;
using System.IO.MemoryMappedFiles;
using System.Threading;

class Process2
{
    static void Main()
    {
        // Open the named mutex
        using (Mutex mutex = new Mutex(false, "Global\\MySharedMemoryMutex"))
        {
            // Open the memory-mapped file
            using (MemoryMappedFile mmf = MemoryMappedFile.OpenExisting("Global\\MySharedMemory"))
            {
                // Lock the mutex to ensure exclusive access
                mutex.WaitOne();

                try
                {
                    // Read from the shared memory
                    using (MemoryMappedViewAccessor accessor = mmf.CreateViewAccessor())
                    {
                        byte[] buffer = new byte[1024];
                        accessor.ReadArray(0, buffer, 0, buffer.Length);
                        string message = System.Text.Encoding.UTF8.GetString(buffer).TrimEnd('\0');
                        Console.WriteLine("Message from Process 1: " + message);
                    }
                }
                finally
                {
                    // Release the mutex
                    mutex.ReleaseMutex();
                }
            }
        }
    }
}

https://qiita.com/Nossa/items/947f8985e4d5f13d9bc2
外部リソースの解放には using ステートメントを使う


https://www.bilibili.com/video/BV1p14y1p7XQ?spm_id_from=333.788.videopod.sections&vd_source=679170e463d34386319e9e1d9a327c75
unity语句解释 第三人称移动和自由视角（你提需求我来试着做）


--
フレームに基づくアニメーションの本体は、CompositionTarget.Renderingイベントです。 下記のコードでは、RenderFrameが、1/60秒ごとに呼び出されます。要素を動かすコードをRenderFrameに記述しておけば、要素が1/60秒ごとに動き、その結果、アニメーションになります。 ちらつきは発生しません。
        protected void UpdateColor(object sender, EventArgs e)
        {
            if (_frameCounter++ == 0)
            {
                // Starting timing.
                _stopwatch.Start();
            }

            // Determine frame rate in fps (frames per second).
            _frameRate =  (long)(_frameCounter/_stopwatch.Elapsed.TotalSeconds);
            if (_frameRate > 0)
            {
                // Update elapsed time, number of frames, and frame rate.
                MyStopwatchLabel.Content = _stopwatch.Elapsed.ToString();
                MyFrameCounterLabel.Content = _frameCounter.ToString(CultureInfo.InvariantCulture);
                MyFrameRateLabel.Content = _frameRate.ToString();
            }

            // Update the background of the canvas by converting MouseMove info to RGB info.
            _redColor = (byte)(_pt.X/3.0);
            _blueColor = (byte)(_pt.Y/2.0);
            MyCanvas.Background = new SolidColorBrush(Color.FromRgb(_redColor, 0x0, _blueColor));
        }
--

https://sakura.hippy.jp/meta/
 メタセコ素材       
https://www.vector.co.jp/download/file/winnt/art/fh753210.html
mqoファイルにボーンを入れてモーションを作るツール
fbx出力機能が改善。
https://ochakkolab.jp/LABMenu/RokDeBone2.html


https://qiita.com/Marimoiro/items/e255eecc265cd5a45025
.Netのソースコードを読む


---
using System;
using System.Threading;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Threading;
using System.Windows.Controls;
using System.IO;
using System.IO.MemoryMappedFiles;



namespace WpfApp1
{
    /// MainWindow.xaml の相互作用ロジック
    /// </summary>
    public partial class MainWindow : Window
    {
        private DispatcherTimer dispatcherTimer;
        string [] m_imageUris = new string[8];
        int m_cnt = 0;
        byte[] _bytes;
        Mutex mutex;
        MemoryMappedFile mmf;
        MemoryMappedViewAccessor accessor;
        byte[] buffer = new byte[1024*20];

        /// <summary>
        private void dispatcherTimer_Tick(object sender, EventArgs e)
        {
            // Open the memory-mapped file
            //using (MemoryMappedFile mmf = MemoryMappedFile.OpenExisting("Global\\MySharedMemory"))
            {
                // Lock the mutex to ensure exclusive access
                mutex.WaitOne();

                try
                {
                    // Read from the shared memory
                    //using (MemoryMappedViewAccessor accessor = mmf.CreateViewAccessor())
                    {
                        //byte[] buffer = new byte[1024];
                        accessor.ReadArray(0, buffer, 0, buffer.Length);
                        //string message = System.Text.Encoding.UTF8.GetString(buffer).TrimEnd('\0');
                        //Console.WriteLine("Message from Process 1: " + message);
                        heli.Source = ToBitmapImage();
                    }
                }
                finally
                {
                    // Release the mutex
                    mutex.ReleaseMutex();
                }
#if false // from local file version
            // assign new source to the Image
            timelabel.Content = DateTime.Now.ToLongTimeString();
            //Image image = sender as Image;

            m_imageUris[0] = "file:///e:/temp/0.png";
            m_imageUris[1] = "file:///e:/temp/1.png";
            m_imageUris[2] = "file:///e:/temp/2.png";
            m_imageUris[3] = "file:///e:/temp/3.png";
            m_imageUris[4] = "file:///e:/temp/4.png";
            m_imageUris[5] = "file:///e:/temp/5.png";
            m_imageUris[6] = "file:///e:/temp/6.png";
            m_imageUris[7] = "file:///e:/temp/7.png";

            heli.Source = new BitmapImage(new Uri(m_imageUris[m_cnt], UriKind.Absolute));
            m_cnt++;
            if (m_cnt > 7) m_cnt = 0;
#endif
            }
        }


        public MainWindow()
        {
            InitializeComponent();

            /*Mutex*/ mutex = new Mutex(false, "Global/MySharedMemoryMutex");
            /*MemoryMappedFile*/ mmf = MemoryMappedFile.OpenExisting("Global/MySharedMemory");
            /*MemoryMappedViewAccessor*/ accessor = mmf.CreateViewAccessor();

            dispatcherTimer = new DispatcherTimer();
            dispatcherTimer.Tick += dispatcherTimer_Tick;
            dispatcherTimer.Interval = TimeSpan.FromMilliseconds(100);//TimeSpan.FromSeconds(1);
            dispatcherTimer.Start();


        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
        }

        public BitmapImage ToBitmapImage()
        {
            BitmapImage img = new BitmapImage();

            img.BeginInit();
            img.StreamSource = new MemoryStream(buffer);
            img.EndInit();

            return img;
        }
    }
}

https://www.youtube.com/watch?v=pJQndtJ2rk0


https://github.com/UnderageStudents/ScrollWheel


https://www.bilibili.com/video/BV1bEtieyEvo/?spm_id_from=333.337.search-card.all.click&vd_source=679170e463d34386319e9e1d9a327c75
unity如何实现在已画好的轨迹上移动物体


https://www.youtube.com/watch?v=L7VXcZXlhww&list=PLmlTJLlksckis8mq3dQJpjqJTn9xeeE-9&index=4
Unity Tutorial: How to Move Objects Along a Drawn Path in Unity 2D

https://www.youtube.com/watch?v=PSiR5eEATfg
trail Renderer【unity】

----
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
//using UnityEngine.Windows;

public class UndaiControl : MonoBehaviour
{
    //public Camera sndcamera;
    public Transform カメラ位置;
    public Transform 雲台;
    public Vector3 previousMousePosition;
    public float moveSpeed = 0.4f;
    public float speed = 0.4f;
    public Vector3 Player_pos;

    public float rotateSpeed = 75.0f;
    private float vInput;
    private float hIuput;

    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        vInput = Input.GetAxis("Vertical");
        hIuput = Input.GetAxis("Horizontal");

        if (Input.GetKey(KeyCode.UpArrow))
            transform.position += 雲台.up * speed * Time.deltaTime;

        if (Input.GetKey(KeyCode.DownArrow))
            transform.position -= 雲台.up * speed * Time.deltaTime;

        if (Input.GetKey(KeyCode.D))
            transform.position += 雲台.right * speed * Time.deltaTime;

        if (Input.GetKey(KeyCode.A))
            transform.position -= 雲台.right * speed * Time.deltaTime;

        if (Input.GetKey(KeyCode.W))
            transform.position += 雲台.forward * speed * Time.deltaTime;

        if (Input.GetKey(KeyCode.S))
            transform.position -= 雲台.forward * speed * Time.deltaTime;

        if (Input.GetMouseButton(0))
        {
            雲台.Rotate(Vector3.up * (previousMousePosition - Input.mousePosition).x* moveSpeed);
            カメラ位置.Rotate(Vector3.right*(previousMousePosition - Input.mousePosition).y* moveSpeed);
        }

        Vector3 diff = 雲台.position - Player_pos;
        if (Input.GetKey(KeyCode.LeftArrow))
        {
            //this.transform.Translate(Vector3.forward * vInput * moveSpeed * Time.deltaTime);
            //this.transform.Rotate(Vector3.up * hIuput * rotateSpeed * Time.deltaTime * (-1));
            雲台.Rotate(Vector3.forward * 3 * moveSpeed);
        }

        if (Input.GetKey(KeyCode.RightArrow))
        {
            //this.transform.Translate(Vector3.forward * vInput * moveSpeed * Time.deltaTime * (-1));
            //this.transform.Rotate(Vector3.up * hIuput * rotateSpeed * Time.deltaTime);
            雲台.Rotate(Vector3.forward * (-3) * moveSpeed);
        }

        previousMousePosition = Input.mousePosition;
        Player_pos = 雲台.position;

        //this.transform.Rotate(Vector3.up * hIuput * rotateSpeed * Time.deltaTime);
    }
}

---
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class lineDra : MonoBehaviour
{
    public GameObject lineholder;
    public LineRenderer lineRenderer;
    public GameObject plane;
    public bool trig = false;
    public int idx = 0;

    public Vector3 pointA;
    public Vector3 pointB;
    public float lerpTime = 2f;
    public float currentLerpTime;
    public bool isLerping=true;

    // Start is called before the first frame update
    void Start()
    {
        lineRenderer = lineholder.GetComponent<LineRenderer>();
        lineRenderer.positionCount = 8;  // 頂点の数
        lineRenderer.SetPosition(0, new Vector3(24, 0, -18));  // 始点
        lineRenderer.SetPosition(1, new Vector3(33, 5, 9));  // 終点
        lineRenderer.SetPosition(2, new Vector3(10, 12, 22));  // 終点
        lineRenderer.SetPosition(3, new Vector3(-17, 12, 24));  // 終点
        lineRenderer.SetPosition(4, new Vector3(-35, 15, 10));  // 終点
        lineRenderer.SetPosition(5, new Vector3(-37, 20, -18));  // 終点
        lineRenderer.SetPosition(6, new Vector3(-30, 36, -37));  // 終点
        lineRenderer.SetPosition(7, new Vector3(-12, 40, -45));  // 終点
    }

    // Update is called once per frame
    void Update()
    {
        if (Input.GetKeyDown(KeyCode.L))
        {
            isLerping = true;
            currentLerpTime = 0f;
        }

        if (lineRenderer != null && idx < 8-1 && trig)
        {
            Vector3 pos = lineRenderer.GetPosition(idx);
            pointA = lineRenderer.GetPosition(idx);
            pointB = lineRenderer.GetPosition(idx+1);
            //plane.transform.Translate(pos);
//            plane.transform.position = pos;

            if (isLerping)
            {
                currentLerpTime += Time.deltaTime;
                if (currentLerpTime >= lerpTime)
                {
                    //currentLerpTime = lerpTime;
                    //isLerping = false;
                    currentLerpTime = 0f;
                    idx++;
                }

                float perc = currentLerpTime / lerpTime;
                if (perc>0f)
                {
                    plane.transform.position = Vector3.Lerp(pointA, pointB, perc);

                }
            }


//            idx++;
        }

    }
}

"C:\Users\sykazcr\AppData\Local\Temp\2MVDNv93BLM4rVhpHsdfDsT405e\FDM.exe" --type=utility --field-trial-handle=1716,8122787305451273709,7713133456717190153,131072 --enable-features=WebComponentsV0Enabled --disable-features=SpareRendererForSitePerProcess --lang=ja --service-sandbox-type=network --mojo-platform-channel-handle=2136 /prefetch:8

https://www.race-technology.com/ja/gopro/example-videos

public class UndaiControl : MonoBehaviour
{
    //public Camera sndcamera;
    public GameObject カメラ位置;
    public GameObject 雲台;
    public Camera sndCamera;
    public Vector3 previousMousePosition;
    public Vector3 currentMousePosition;
    public float moveSpeed = 0.4f;
    public float speed = 0.4f;
    public Vector3 Player_pos;
    Vector3 雲台固定高度;

    public float rotateSpeed = 75.0f;
    private float vInput;
    private float hIuput;

    // Start is called before the first frame update
    void Start()
    {
        雲台固定高度 = 雲台.transform.position;
        雲台固定高度.y = 80f;
        雲台.transform.position = 雲台固定高度;

        previousMousePosition = Input.mousePosition;
        currentMousePosition = Input.mousePosition;
    }
    public float MouseZoomSpeed = 15.0f;
    public float ZoomMinBound = 0.1f;
    public float ZoomMaxBound = 179.9f;

      

    void CameraFodZoom()
    {
        float scroll = Input.GetAxis("Mouse ScrollWheel");
        Zoom(scroll, MouseZoomSpeed);
    }


    void Zoom(float deltaMagnitudeDiff, float speed)
    {
        sndCamera.fieldOfView += deltaMagnitudeDiff * speed;
        sndCamera.fieldOfView = Mathf.Clamp(sndCamera.fieldOfView, ZoomMinBound, ZoomMaxBound);
    }

    // Update is called once per frame
    void Update()
    {
        CameraFodZoom();

        vInput = Input.GetAxis("Vertical");
        hIuput = Input.GetAxis("Horizontal");
        float scroll = Input.GetAxis("Mouse ScrollWheel");

        // 雲台高度固定
        雲台固定高度 = 雲台.transform.position;
        if(Mathf.Abs(雲台固定高度.y-80f) > 1)
        {
            Debug.Log("雲台固定高度" + 雲台固定高度);
        }
        //雲台固定高度.y = 80f;
        //雲台.transform.position = 雲台固定高度;


        if (Input.GetKey(KeyCode.D))
            transform.position += 雲台.transform.right * speed * Time.deltaTime;

        if (Input.GetKey(KeyCode.A))
            transform.position -= 雲台.transform.right * speed * Time.deltaTime;

        if (Input.GetKey(KeyCode.W))
            transform.position += 雲台.transform.forward * speed * Time.deltaTime;

        if (Input.GetKey(KeyCode.S))
            transform.position -= 雲台.transform.forward * speed * Time.deltaTime;

        //回転
        // 画面外にマウス位置は記憶しない
        //Debug.Log(Input.mousePosition);
        float w = Screen.width;
        float h = Screen.height;
        if((Input.mousePosition.x < w) && (Input.mousePosition.y < h))
        {
            // 画面範囲外から戻る時マウスは一回Reset
            if (Input.GetMouseButtonDown(0) || Input.GetMouseButtonDown(2))
            {
                previousMousePosition = Input.mousePosition;
            }

            if (Input.GetMouseButton(0))
            {
                currentMousePosition = Input.mousePosition;
                //Debug.Log(previousMousePosition);
                //Debug.Log(currentMousePosition);
                Vector3 v = previousMousePosition - Input.mousePosition;

                雲台.transform.Rotate(Vector3.up * v.x * moveSpeed * 0.1f);
                カメラ位置.transform.Rotate(Vector3.left * v.y * moveSpeed * 0.1f);
                v.z = 10f;
                if (Input.GetKey(KeyCode.LeftShift))
                {
                    sndCamera.transform.Rotate(Vector3.forward * v.z * moveSpeed * 0.1f);
                }

                previousMousePosition = Input.mousePosition;
            }
            // mouse wheel 雲台移動（天井平面で）
            if (Input.GetMouseButton(2))
            {
                Vector3 v = previousMousePosition - Input.mousePosition;
                v.y = 雲台固定高度.y;
                // X軸移動
                雲台.transform.Translate(Vector3.right * v.x * speed * 0.1f);
                // Z軸移動
                雲台.transform.Translate(Vector3.up * v.y * speed * 0.1f);
                previousMousePosition = Input.mousePosition;
            }
        }

---
https://qiita.com/nneri/items/e101376b2c159c56b9c4#:~:text=%E3%81%BE%E3%81%9A%E3%80%81%20%E3%81%93%E3%81%A1%E3%82%89%E3%81%AEGithub%E3%81%AE%E3%83%9A%E3%83%BC%E3%82%B8%20%E3%81%AECode%E3%81%8B%E3%82%89zip%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%97%E3%81%BE%E3%81%99%E3%80%82%20Blender%E3%81%AE%E3%83%97%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9%E3%81%AE%E3%82%A2%E3%83%89%E3%82%AA%E3%83%B3%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%8B%E3%82%89%E8%90%BD%E3%81%A8%E3%81%97%E3%81%9Fzip%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E9%96%8B%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82%20%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E3%81%9F%E3%81%84%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E9%81%B8%E3%81%B3%E3%80%81%E5%8F%B3%E5%81%B4%E3%81%AEOrigin,Japan%20Mesh%20Code%E3%81%AB%E4%B8%AD%E5%BF%83%E3%81%AB%E3%81%97%E3%81%9F%E3%81%84%E5%9C%B0%E5%9F%9F%E3%83%A1%E3%83%83%E3%82%B7%E3%83%A5%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E5%85%A5%E3%82%8C%E3%81%BE%E3%81%99%E3%80%82%20%E3%81%93%E3%82%93%E3%81%AA%E6%84%9F%E3%81%98%E3%81%A7%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%81%E3%81%BE%E3%81%99%E3%80%82%20%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%AE%E4%B8%AD%E5%BF%83%E3%81%AE%E5%9C%B0%E5%9F%9F%E3%83%A1%E3%83%83%E3%82%B7%E3%83%A5%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AF%E6%9D%B1%E4%BA%AC%E9%A7%85%E3%81%AE%E3%81%82%E3%81%9F%E3%82%8A
PlateauのCityGMLをBlenderで読み込むアドオンを書いた

{"id":1,"name":"sample1234567890","rate":2.553}
{"id":1,"name":"sample1⼲ 567890","rate":2.553}

https://qiita.com/tera1707/items/2a774f4a76c48fc849fa
[C#] .NET標準のDataContractJsonSerializerクラスを使ってjsonを読み書きする
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.Text;

namespace JsonTest
{
    class Program
    {
        static void Main(string[] args)
        {
            // デシリアライズ(jsonファイル→クラスオブジェクト)
            string jsonFilePath = @"TestData.json";
            var data = new List<PointData>();

            using (var ms = new FileStream(jsonFilePath, FileMode.Open))
            {
                var serializer = new DataContractJsonSerializer(typeof(List<PointData>));
                data = (List<PointData>)serializer.ReadObject(ms);
            }

            // シリアライズ(クラスオブジェクト→jsonファイル)
            string jsonFilePathOut = @"TestDataOut.json";

            using (var stream = new MemoryStream())
            using (var fs = new FileStream(jsonFilePathOut, FileMode.Create))
            using (var sw = new StreamWriter(fs))
            {
                var serializer = new DataContractJsonSerializer(typeof(List<PointData>));
                serializer.WriteObject(stream, data);
                var str2write = Encoding.UTF8.GetString(stream.ToArray());
                sw.Write(str2write);
            }

            // 終わり
            Console.WriteLine("json読み書き完了");
            Console.ReadLine();
        }
    }

    [DataContract]
    public class PointData
    {
        [DataMember]
        public List<double> small { get; set; }

        [DataMember]
        public List<double> large { get; set; }
    }
}


[
    {
        "small": [
            123.456,
            789.012
        ],
        "large": [
            987.654,
            654.321
        ]
    },
    {
        "small": [
            111.456,
            222.012
        ],
        "large": [
            333.654,
            444.321
        ]
    }
]
--
[{"id":1,"name":"sample1234567890","rate":2.553},{"id":1,"name":"sample1234567890","rate":2.553}]
   public void OnBtnClick()
   {
       Debug.Log("JsonSender");
       List<Item> items = new List<Item>();
       // 共有するオブジェクト
       var item = new Item
       {
           ID = 1,
           Rate = 2.553,
           Name = "sample1234567890",
       };
       items.Add(item);
       var item2 = new Item
       {
           ID = 1,
           Rate = 2.553,
           Name = "sample1234567890",
       };
       items.Add(item2);

       int pos = 0;
       var sharedMemory = MemoryMappedFile.CreateNew("share", 1024 * 1024 * 5); // 5MB分領域を確保
       using (MemoryMappedViewAccessor view = sharedMemory.CreateViewAccessor())
       {
           string jsonStr = JsonUtility.Serialize(items);
           char[] jsonCharArray = jsonStr.ToCharArray(0, jsonStr.Length); // C#のcharは2byte
           view.Write(0, jsonCharArray.Length);
           view.WriteArray(sizeof(int), jsonCharArray, 0, jsonCharArray.Length);

           //string jsonStr = JsonUtility.Serialize(item);
           //char[] jsonCharArray = jsonStr.ToCharArray(0, jsonStr.Length); // C#のcharは2byte

           //// 受け取り手はサイズが分からないので先頭にサイズを書いておく
           //view.Write(0, jsonCharArray.Length);

           //// Json文字列を共有メモリに書き込み
           //view.WriteArray(sizeof(int), jsonCharArray, 0, jsonCharArray.Length);

           //pos = sizeof(int) + jsonCharArray.Length * sizeof(char); //C#のcharは2byte
           //view.Write(pos, jsonCharArray.Length);

           //pos += sizeof(int);
           //// Json文字列を共有メモリに書き込み
           //view.WriteArray(pos, jsonCharArray, 0, jsonCharArray.Length);
           //pos += jsonCharArray.Length * sizeof(char);
       }

       Console.ReadLine(); // プロセスが終了するとデータが消えるのでここで止めておく

       using (sharedMemory) { }
   }
   
       public void OnReceiverBtnClick()
    {
        List<Item> items = new List<Item>();
        Debug.Log("OnReceiverBtnClick");
        string json = ReadDataByJson();

        // 読み取ったデータをデシリアライズしてオブジェクトに戻す
        //var item = JsonUtility.Deserialize<Item>(json);
        items = JsonUtility.Deserialize<List<Item>>(json);

        Console.WriteLine($"{items}");
        // > ID=1, Rate=2.553, Name=sample1234567890

        //json = ReadDataByJson(sizeof(int)+47*2);
    }